# Coding the Image Classification Model:
# image_classifier.py
import tensorflow as tf
from tensorflow import keras
from flask import Flask, render_template, request

app = Flask(__name__)

# Load the MNIST dataset
mnist = keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Normalize the pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# Build the model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(10)
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
model.fit(train_images, train_labels, epochs=5)

# Evaluate the model on the test data
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"\nTest Accuracy: {test_acc}")

# Save the model
model.save("mnist_model.h5")

# Building the Web Application:
# app.py
from flask import Flask, render_template, request
import tensorflow as tf
from PIL import Image
import numpy as np

app = Flask(__name__)

# Load the trained model
model = tf.keras.models.load_model('mnist_model.h5')

# Define a function to preprocess the user-uploaded image
def preprocess_image(image_path):
    img = Image.open(image_path).convert('L')  # Convert to grayscale
    img = img.resize((28, 28))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Define the route for the home page
@app.route('/')
def home():
    return render_template('index.html')

# Define the route for handling image uploads and making predictions
@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # Get the uploaded image
        uploaded_file = request.files['file']
        img_path = f"uploads/{uploaded_file.filename}"
        uploaded_file.save(img_path)

        # Preprocess the image
        img_array = preprocess_image(img_path)

        # Make predictions
        predictions = model.predict(img_array)
        predicted_label = np.argmax(predictions)

        return render_template('index.html', prediction=predicted_label, img_path=img_path)

if __name__ == '__main__':
    app.run(debug=True)

 # HTML Template:
<!-- templates/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MNIST Image Classifier</title>
</head>
<body>
    <h1>MNIST Image Classifier</h1>

    <form action="/predict" method="post" enctype="multipart/form-data">
        <input type="file" name="file" accept=".png, .jpg, .jpeg">
        <button type="submit">Predict</button>
    </form>

    {% if prediction is defined %}
        <h2>Prediction: {{ prediction }}</h2>
        <img src="{{ img_path }}" alt="Uploaded Image" style="max-width: 300px;">
    {% endif %}
</body>
</html>


